


ARM Macro Assembler    Page 1 


    1 00000000         ;*------------------------------------------------------
                       ----------------------
    2 00000000         ;* Name:    Lab_1_program.s 
    3 00000000         ;* Purpose: This code flashes one LED at approximately 1
                        Hz frequency 
    4 00000000         ;* Author:  Rasoul Keshavarzi 
    5 00000000         ;*------------------------------------------------------
                       ----------------------*/
    6 00000000                 THUMB                        ; Declare THUMB ins
                                                            truction set 
    7 00000000                 AREA             My_code, CODE, READONLY ; 
    8 00000000                 EXPORT           __MAIN      ; Label __MAIN is u
                                                            sed externally q
    9 00000000                 ENTRY
   10 00000000         __MAIN
   11 00000000         ; The following operations can be done in simpler method
                       s. They are done in this 
   12 00000000         ; way to practice different memory addressing methods. 
   13 00000000         ; MOV moves into the lower word (16 bits) and clears the
                        upper word
   14 00000000         ; MOVT moves into the upper word
   15 00000000         ; show several ways to create an address using a fixed o
                       ffset and register as offset
   16 00000000         ;   and several examples are used below
   17 00000000         ; NOTE MOV can move ANY 16-bit, and only SOME >16-bit, c
                       onstants into a register
   18 00000000 F44F 4240       MOV              R2, #0xC000 ; move 0xC000 into 
                                                            R2
   19 00000004 F04F 0400       MOV              R4, #0x0    ; init R4 register 
                                                            to 0 to build addre
                                                            ss
   20 00000008 F2C2 0409       MOVT             R4, #0x2009 ; assign 0x20090000
                                                             into R4
   21 0000000C 4414            ADD              R4, R4, R2  ; add 0xC000 to R4 
                                                            to get 0x2009C000 
   22 0000000E F04F 037C       MOV              R3, #0x0000007C ; move initial 
                                                            value for port P2 i
                                                            nto R3             
                                                             TURNS OFF
   23 00000012 6423            STR              R3, [R4, #0x40] ; Turn off five
                                                             LEDs on port 2 
   24 00000014 F04F 4330       MOV              R3, #0xB0000000 ; move initial 
                                                            value for port P1 i
                                                            nto R3             
                                                             TURNS OFF
   25 00000018 6223            STR              R3, [R4, #0x20] ; Turn off thre
                                                            e LEDs on Port 1 us
                                                            ing an offset
   26 0000001A F04F 0220       MOV              R2, #0x20   ; put Port 1 offset
                                                             into R2
   27 0000001E         
   28 0000001E         loop
   29 0000001E         ;SETS THE COUNTER, R0
   30 0000001E F24A 1020       MOV              R0, #0xA120 ;assigns 0x0000A120
                                                             to R0
   31 00000022 F2C0 0007       MOVT             R0, #0x0007 ;assigns 0x0007A120
                                                             to R0 
   32 00000026         
   33 00000026         



ARM Macro Assembler    Page 2 


   34 00000026         ; The number inside R0 is 500,000 in decimal, since each
                        instruction takes 1ms, the decrementloop takes 0.5 seco
                       nds to run
   35 00000026         ;therefore LED blinks off and on every 0.5 seconds
   36 00000026         decrementloop
   37 00000026 3801            SUBS             R0, #1      ; Decrement r0 and 
                                                            set N,Z,V,C status 
                                                            bits in the status 
                                                            register so that BN
                                                            E can check Z bit
   38 00000028 D1FD            BNE              decrementloop ; Leaves the decr
                                                            ement loop and ente
                                                            rs the toggle loop 
                                                            when R0 reaches 0
   39 0000002A         ; Keeps branching to decrementloop till the Z status bit
                        is 1 (R0=0) then it leaves
   40 0000002A         
   41 0000002A F083 5380       EOR              R3, #0x10000000 ; TOGGLES R3 FR
                                                            OM 0xB0000000 to 0x
                                                            A0000000
   42 0000002E 50A3            STR              R3, [R4, R2] ; Depending on wha
                                                            t is in R3 it turns
                                                             OFF or ON the LED
   43 00000030 E7F5            B                loop        ; INFINITE LOOP
   44 00000032                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=Lab_1_pr
ogram.d -oLab_1_program.o -IC:\Software\Keil\ARM\RV31\INC -IC:\Software\Keil\AR
M\CMSIS\Include -IC:\Software\Keil\ARM\Inc\NXP\LPC17xx --list=Lab_1_program.lst
 Lab_1_program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

My_code 00000000

Symbol: My_code
   Definitions
      At line 7 in file Lab_1_program.s
   Uses
      None
Comment: My_code unused
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 10 in file Lab_1_program.s
   Uses
      At line 8 in file Lab_1_program.s
Comment: __MAIN used once
decrementloop 00000026

Symbol: decrementloop
   Definitions
      At line 36 in file Lab_1_program.s
   Uses
      At line 38 in file Lab_1_program.s
Comment: decrementloop used once
loop 0000001E

Symbol: loop
   Definitions
      At line 28 in file Lab_1_program.s
   Uses
      At line 43 in file Lab_1_program.s
Comment: loop used once
4 symbols
334 symbols in table
